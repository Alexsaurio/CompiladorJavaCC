/* Generated By:JavaCC: Do not edit this line. CompiladorTokenManager.java */
package javacc;
import java.util.ArrayList;

/** Token Manager. */
public class CompiladorTokenManager implements CompiladorConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2040000000000L) != 0L)
         {
            jjmatchedKind = 58;
            return 6;
         }
         if ((active0 & 0x5fbc04c00000eL) != 0L)
         {
            jjmatchedKind = 58;
            return 12;
         }
         return -1;
      case 1:
         if ((active0 & 0x4104000000000L) != 0L)
            return 12;
         if ((active0 & 0x3ef804c00000eL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 1;
            }
            return 12;
         }
         return -1;
      case 2:
         if ((active0 & 0x78b804800000eL) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
            return 12;
         }
         if ((active0 & 0x640004000000L) != 0L)
            return 12;
         return -1;
      case 3:
         if ((active0 & 0x1028048000000L) != 0L)
            return 12;
         if ((active0 & 0x689000000000cL) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 3;
            return 12;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0x2080000000000L) != 0L)
            return 12;
         if ((active0 & 0x481000000000cL) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
            return 12;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 5;
            return 12;
         }
         if ((active0 & 0x4010000000008L) != 0L)
            return 12;
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x800000000000L) != 0L)
            return 12;
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x2L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 2;
            }
            return -1;
         }
         return -1;
      case 10:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 12:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 13:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x4L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 58;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 72;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 33:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0x0L);
      case 37:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 62);
      case 41:
         return jjStopAtPos(0, 63);
      case 42:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 43:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x4100L, 0x0L);
      case 44:
         return jjStopAtPos(0, 59);
      case 45:
         jjmatchedKind = 5;
         return jjMoveStringLiteralDfa1_0(0x10200L, 0x0L);
      case 47:
         jjmatchedKind = 7;
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x10L);
      case 58:
         return jjStopAtPos(0, 61);
      case 59:
         return jjStopAtPos(0, 60);
      case 60:
         jjmatchedKind = 22;
         return jjMoveStringLiteralDfa1_0(0xfa0040000L, 0x0L);
      case 61:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 62:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x10080000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 64);
      case 93:
         return jjStopAtPos(0, 65);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x142000c000000L, 0x0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4100000000000L, 0x0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x208040000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2040000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4000000002L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 66);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 67);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         break;
      case 38:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 43:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 45:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 47:
         if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         break;
      case 60:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      case 61:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(1, 18);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(1, 19);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(1, 20);
         break;
      case 62:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x420000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8L, active1, 0L);
      case 70:
      case 102:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 12);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1080000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1084000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2008800000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200040000002L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4840008000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000004L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 124:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000100000000L);
      case 68:
      case 100:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2200000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x90800000004L);
      case 78:
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x2800080000000L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 12);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000000000L);
      case 84:
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 12);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000aL);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000008000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x2L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1200000000L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 12);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 12);
         break;
      case 70:
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 76:
      case 108:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x880000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x4L);
      case 82:
      case 114:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x880000000L);
      case 84:
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 12);
         return jjMoveStringLiteralDfa4_0(active0, 0x10100000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 69:
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x4L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x2400000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4001000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x2L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L);
      case 84:
      case 116:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 12);
         return jjMoveStringLiteralDfa5_0(active0, 0xa80000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x4L);
      case 46:
         return jjMoveStringLiteralDfa6_0(active0, 0x900000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000002L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 12);
         break;
      case 72:
      case 104:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 12);
         break;
      case 78:
      case 110:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 3, 12);
         return jjMoveStringLiteralDfa6_0(active0, 0x2400000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(6, 37);
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0x900000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 47, 12);
         return jjMoveStringLiteralDfa7_0(active0, 0x4L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa8_0(active0, 0x600000000L);
      case 62:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(7, 32);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(7, 35);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000004L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(7, 36);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 40:
         return jjMoveStringLiteralDfa9_0(active0, 0x2L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x600000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000004L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 41:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(9, 1);
         break;
      case 46:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L);
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(9, 33);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(9, 34);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 72:
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(11, 31);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa16_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x4L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(18, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x0L, 0x400000004L
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x10000000000000L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x1000000000000L, 0x0L
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0x200000000L, 0x0L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x8000000000000000L, 0x0L
};
static final long[] jjbitVec5 = {
   0x0L, 0x0L, 0x100000000000L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x0L, 0x10000000000L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 31;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(12);
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAddStates(0, 6);
                  }
                  else if ((0x8000009200000000L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  else if (curChar == 34)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0xffffffff00000000L & l) != 0L)
                     jjCheckNAddTwoStates(1, 2);
                  break;
               case 2:
                  if (curChar == 34 && kind > 51)
                     kind = 51;
                  break;
               case 13:
                  if ((0x8000009200000000L & l) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAddStates(0, 6);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 46)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(25);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 54)
                     kind = 54;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 46)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjCheckNAdd(30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(12);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAdd(12);
                  }
                  else if ((0x4000000150000001L & l) != 0L)
                  {
                     if (kind > 69)
                        kind = 69;
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 1:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(7, 8);
                  break;
               case 3:
                  if ((0x2000000020L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 4:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 5:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 9:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if ((0x4000000150000001L & l) != 0L)
                     kind = 69;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 14);
                  break;
               case 15:
                  if ((jjbitVec1[i2] & l2) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 16:
                  if ((jjbitVec2[i2] & l2) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 17:
                  if ((jjbitVec3[i2] & l2) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 18:
                  if ((jjbitVec4[i2] & l2) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 19:
                  if ((jjbitVec5[i2] & l2) != 0L && kind > 69)
                     kind = 69;
                  break;
               case 20:
                  if ((jjbitVec6[i2] & l2) != 0L && kind > 69)
                     kind = 69;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 31 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   22, 23, 25, 26, 27, 28, 30, 1, 2, 15, 16, 17, 18, 19, 20, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\53", "\55", "\52", "\57", "\53\53", "\55\55", "\45", 
"\75", "\52\75", "\57\75", "\53\75", "\45\75", "\55\75", "\75\75", "\74\75", 
"\76\75", "\41\75", "\76", "\74", "\46\46", "\174\174", "\41", null, null, "\76\76", 
"\74\74", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\54", "\73", "\72", "\50", "\51", "\133", "\135", "\173", "\175", 
"\57\57", null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x3fL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x7c0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[31];
private final int[] jjstateSet = new int[62];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public CompiladorTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CompiladorTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 31; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("parte principal de programa: "+image);
        Compilador.tablaTok.add("parte principal de programa: "+image);
         break;
      case 2 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                         System.out.println("implementacion de palabras reservadas: "+image);
        Compilador.tablaTok.add("implementacion de palabras reservadas: "+image);
         break;
      case 3 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("REGRESO DE LA FUNCION: "+image);
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                        System.out.println("MAS: "+image);
                Compilador.tablaTok.add("MAS: "+image);
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                      System.out.println("MENOS: "+image);
                Compilador.tablaTok.add("MENOS: "+image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                      System.out.println("MULTIPLICAR: "+image);
                Compilador.tablaTok.add("MULTIPLICAR: "+image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                     System.out.println("DIVIDIR: "+image);
                Compilador.tablaTok.add("DIVIDIR: "+image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                              System.out.println("INCREMENTO: "+image);
                Compilador.tablaTok.add("INCREMENTO: "+image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                              System.out.println("DECREMENTO: "+image);
                Compilador.tablaTok.add("DECREMENTO: "+image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                       System.out.println("MODULO: "+image);
                Compilador.tablaTok.add("MODULO: "+image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                         System.out.println("ASIGNACION: "+image);
                Compilador.tablaTok.add("ASIGNACION: "+image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                        System.out.println("ASIGNA PRODUCTO: "+image);
                Compilador.tablaTok.add("ASIGNACION PRODUCTO: "+image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                         System.out.println("ASIGNA DIVISION: "+image);
                Compilador.tablaTok.add("ASIGNA DIVISION: "+image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                       System.out.println("ASIGNA SUMA: "+image);
                Compilador.tablaTok.add("ASIGNA SUMA: "+image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                       System.out.println("ASIGNA MODULO: "+image);
                Compilador.tablaTok.add("ASIGNA MODULO: "+image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                       System.out.println("ASIGNA RESTA: "+image);
                Compilador.tablaTok.add("ASIGNA RESTA: "+image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                         System.out.println("SIMBOLO DE OPERACION IGUAL: "+image);
                        Compilador.tablaTok.add("SIMBOLO DE OPERACION IGUAL: "+image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                              System.out.println("SIMBOLO DE COMPARACION MENOR IGUAL: "+image);
                Compilador.tablaTok.add("SOMBOLO DE COMPARACION DE MENOR IGUAL: "+image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                              System.out.println("SIMBOLO DE COMPARACION MAYOR IGUAL: "+image);
                Compilador.tablaTok.add("SIMBOLO DE COMPARACION MAYOR IGUAL: "+image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                             System.out.println("SIMBOLO DE COMPARACION DIFERENTE: "+image);
                Compilador.tablaTok.add("SOMBOLO DE COMPARACION DIFERENTE: "+image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                        System.out.println("SIMBOLO DE COMPARACION MAYOR: "+image);
                Compilador.tablaTok.add("SIMBOLO DE COMPARACION MAYOR: "+image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                        System.out.println("SIMBOLO DE COMPARACION MENOR: "+image);
                Compilador.tablaTok.add("SIMBOLO DE COMPARACION MENOR: "+image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                     System.out.println("OPERADOR AND: " +image);
                Compilador.tablaTok.add("OPERADOR AND: "+image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                      System.out.println("OPERADOR OR: "+image);
                Compilador.tablaTok.add("OPERADOR OR: "+image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                       System.out.println("OPERADOR NOT: "+image);
                Compilador.tablaTok.add("OPERADOR NOT: "+image);
         break;
      case 26 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("ENTRADA DE DATOS EN CONSOLA: "+image);
                Compilador.tablaTok.add("ENTRADA DE DATOS EN CONSOLA: "+image);
         break;
      case 27 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("SALIDA DE DATOS EN CONSOLA: "+image);
                Compilador.tablaTok.add("SALIDA DE DATOS EN CONSOLA: "+image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                         System.out.println("indacor de entrada de datos: "+image);
                Compilador.tablaTok.add("INDICADOR DE ENTRADA DE DATOS: "+image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                          System.out.println("indicador salida de datos: "+image);
                Compilador.tablaTok.add("INDICADOR DE SALIDA DE DATOS: "+image);
         break;
      case 30 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("indica final de impresion: "+image);
                Compilador.tablaTok.add("INDICA FINAL DE LA IMPRESION: "+image);
         break;
      case 31 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                     System.out.println("PARTE DEL STL QUE CONTIENE ALGORITMOS ESTANDAR: "+image);
                        Compilador.tablaTok.add("pARTE DE STL QUE CONTIENE ALGORITMOS ESTANDAR: "+image);
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("USO Y MANIPULACION DE OPERACIONES MATEMATICAS: "+image);
                Compilador.tablaTok.add("USO Y MANIPULACION DE OPERACIONES MATEMATICAS: "+image);
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("USO DE MATRICES UNIDIMENSIONALES: "+image);
                Compilador.tablaTok.add("USO DE MATRICES UNIDIMENSIONALES: "+image);
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("USO DE LAS CADENAS ALFANUMERICAS, CARACTERES, ETC: "+image);
                Compilador.tablaTok.add("USO DE LAS CADENAS ALFANUMERICAS, CARACTERES, ETC: "+image);
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("PERMITE IMPLEMENTAR LISTAS DOBLEMENTE ENLAZADAS: "+image);
                Compilador.tablaTok.add("USO DE LAS CADENAS ALFANUMERICAS, CARACTERES, ETC: "+image);
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("INTRODUCIR LIBRERIAS: "+image);
                Compilador.tablaTok.add("INTRODUCIR LIBRERIAS: "+image);
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println("CREAR CONSTANTES: "+image);
                Compilador.tablaTok.add("CREAR CONSTANTES: "+image);
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println("CONDICIONAL IF: "+image);
                        Compilador.tablaTok.add("CONDICIAL IF: "+image);
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("CONDICIONAL ELSE: "+image);
                Compilador.tablaTok.add("CONDICIAL ELSE: "+image);
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println("CONDICIONAL SWITCH: "+image);
                Compilador.tablaTok.add("CONDICIAL SWITCH: "+image);
         break;
      case 41 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("OPCION DEL SWITCHL: "+image);
                Compilador.tablaTok.add("CONDICIAL SWITCHL: "+image);
         break;
      case 42 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println("CICLO FOR: "+image);
                        Compilador.tablaTok.add("CILOC FOR: "+image);
         break;
      case 43 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println("CICLO WHILE: "+image);
                Compilador.tablaTok.add("CICLO WHILE: "+image);
         break;
      case 44 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("CICLO DO WHILE: "+image);
                Compilador.tablaTok.add("CICLO DO WHILE: "+image);
         break;
      case 45 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println("Tipo Entero: "+image+"\u005cr\u005cn");
        Compilador.tablaTok.add("Tipo Entero: "+image);
         break;
      case 46 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println("Tipo Long:"+image+"\u005cr\u005cn");
        Compilador.tablaTok.add("Tipo Long: "+image);
         break;
      case 47 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println("Tipo Boleano:"+image+"\u005cr\u005cn");
        Compilador.tablaTok.add("Tipo Boleano: "+image);
         break;
      case 48 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println("Tipo caracter:"+image+"\u005cr\u005cn");
        Compilador.tablaTok.add("Tipo caracter: "+image);
         break;
      case 49 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println("Tipo flotante:"+image+"\u005cr\u005cn");
        Compilador.tablaTok.add("Tipo flotante: "+image);
         break;
      case 50 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println("Tipo double:"+image+"\u005cr\u005cn");
        Compilador.tablaTok.add("Tipo double: "+image);
         break;
      case 51 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                          System.out.println("VALORES DE TIPO CARACTER: "+image);
                Compilador.tablaTok.add("VALORES TIPOS CARACTER: "+image);
         break;
      case 52 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                  System.out.println("VALORES REALES EN PUNTO FLOTANTE: "+image);
                Compilador.tablaTok.add("VALORES REALES EN PUNTO FLOTANT: "+image);
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println("NUMEROS: "+image);
                Compilador.tablaTok.add("NUMEROS: "+image);
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println(" NUMEROS MUY GRANDES: "+image);
                Compilador.tablaTok.add("NUMEROS MUY GRANDES: "+image);
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                     System.out.println("ALMACENA VALORES REALES EN DOBLE PRECISION:"+image);
                Compilador.tablaTok.add("ALMACENA VALORES REALES EN DOBLE PRECISION: "+image);
         break;
      case 56 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       System.out.println(" VALORES 1 Y 0:"+image);
                Compilador.tablaTok.add("VALORES 1 Y 0: "+image);
         break;
      case 57 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    System.out.println("NUMEROS MUY PEQUE\u00c3\u2018OS:"+image);
                Compilador.tablaTok.add("NUMEROS MUY PEQUE\u00c3\u2018OS: "+image);
         break;
      case 58 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                          System.out.println("VARIABLES: "+image);
                Compilador.tablaTok.add("VARIABLES: "+image);
         break;
      case 59 :
        image.append(jjstrLiteralImages[59]);
        lengthOfMatch = jjstrLiteralImages[59].length();
                    System.out.println("SEPARADOR: "+image);
                        Compilador.tablaTok.add("SEPARADOR: "+image);
         break;
      case 60 :
        image.append(jjstrLiteralImages[60]);
        lengthOfMatch = jjstrLiteralImages[60].length();
                             System.out.println("punto y coma: "+image);
                        Compilador.tablaTok.add("PUNTO Y COMA: "+image);
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
                       System.out.println("dos puntos: "+image);
                        Compilador.tablaTok.add("DOS PUNTOS: "+image);
         break;
      case 62 :
        image.append(jjstrLiteralImages[62]);
        lengthOfMatch = jjstrLiteralImages[62].length();
                         System.out.println("COMIENZO DE UNA AGRUPACION DE EXPRESIONES: "+image);
                        Compilador.tablaTok.add("COMIENZO DE UNA AGRUPACION DE EXPRESIONES: "+image);
         break;
      case 63 :
        image.append(jjstrLiteralImages[63]);
        lengthOfMatch = jjstrLiteralImages[63].length();
                         System.out.println("FINAL DE UNA AGRUPACION DE EXPRESIONES: "+image);
                        Compilador.tablaTok.add("FINAL DE UNA AGRUPACION DE EXPRESIONES: "+image);
         break;
      case 64 :
        image.append(jjstrLiteralImages[64]);
        lengthOfMatch = jjstrLiteralImages[64].length();
                     System.out.println("INDICAN SUBINDICES DE MATRICES UNI Y MULTIDIMENSIONALES: "+image);
                        Compilador.tablaTok.add("INDICAN SUBINDICES DE MATRICES UNI Y MULTIDIMENSIONALES: "+image);
         break;
      case 65 :
        image.append(jjstrLiteralImages[65]);
        lengthOfMatch = jjstrLiteralImages[65].length();
                         System.out.println("INDICAN SUBINDICES DE MATRICES UNI Y MULTIDIMENSIONALES: "+image);
                        Compilador.tablaTok.add("INDICAN SUBINDICES DE MATRICES UNI Y MULTIDIMENSIONALES: "+image);
         break;
      case 66 :
        image.append(jjstrLiteralImages[66]);
        lengthOfMatch = jjstrLiteralImages[66].length();
                         System.out.println("COMIENZO DE UNA SENTENCIA COMPUESTA: "+image);
                        Compilador.tablaTok.add("COMIENZO DE UNA SENTENCIA COMPUESTA: "+image);
         break;
      case 67 :
        image.append(jjstrLiteralImages[67]);
        lengthOfMatch = jjstrLiteralImages[67].length();
                         System.out.println("FINAL DE UNA SENTENCIA COMPUESTA: "+image);
                        Compilador.tablaTok.add("FINAL DE UNA SENTENCIA COMPUESTA: "+image);
         break;
      case 68 :
        image.append(jjstrLiteralImages[68]);
        lengthOfMatch = jjstrLiteralImages[68].length();
                           System.out.println("INICIO DE COMENTARIO: "+image);
                        Compilador.tablaTok.add("INICIO DE COMENTARIO: "+image);
         break;
      case 69 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                System.out.println("ERROR CARACTER NO ADMITIDO: "+image);
            Compilador.tablaTok.add("ERROR CARACTO NO ADMITIDO: "+image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
