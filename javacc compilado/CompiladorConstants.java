/* Generated By:JavaCC: Do not edit this line. CompiladorConstants.java */
package compilador;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CompiladorConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTMAIN = 1;
  /** RegularExpression Id. */
  int USINGNMST = 2;
  /** RegularExpression Id. */
  int RETURN = 3;
  /** RegularExpression Id. */
  int SUMA = 4;
  /** RegularExpression Id. */
  int RESTA = 5;
  /** RegularExpression Id. */
  int MULTI = 6;
  /** RegularExpression Id. */
  int DIVI = 7;
  /** RegularExpression Id. */
  int INCREMENTO = 8;
  /** RegularExpression Id. */
  int DECREMENTO = 9;
  /** RegularExpression Id. */
  int MODU = 10;
  /** RegularExpression Id. */
  int IGUALACION = 11;
  /** RegularExpression Id. */
  int PORIGUAL = 12;
  /** RegularExpression Id. */
  int DIVIIGUAL = 13;
  /** RegularExpression Id. */
  int SUMIGUAL = 14;
  /** RegularExpression Id. */
  int RETIGUAL = 15;
  /** RegularExpression Id. */
  int MINIGUAL = 16;
  /** RegularExpression Id. */
  int IGUAL = 17;
  /** RegularExpression Id. */
  int MENORIGUAL = 18;
  /** RegularExpression Id. */
  int MAYORIGUAL = 19;
  /** RegularExpression Id. */
  int DIFFERENT = 20;
  /** RegularExpression Id. */
  int MAYOR = 21;
  /** RegularExpression Id. */
  int MENOR = 22;
  /** RegularExpression Id. */
  int AND = 23;
  /** RegularExpression Id. */
  int OR = 24;
  /** RegularExpression Id. */
  int NOT = 25;
  /** RegularExpression Id. */
  int CAPTURA = 26;
  /** RegularExpression Id. */
  int IMPRESION = 27;
  /** RegularExpression Id. */
  int ENTCIN = 28;
  /** RegularExpression Id. */
  int SALCOUT = 29;
  /** RegularExpression Id. */
  int ENDL = 30;
  /** RegularExpression Id. */
  int ESTANDAR = 31;
  /** RegularExpression Id. */
  int FUNCIONMAT = 32;
  /** RegularExpression Id. */
  int MATRIZ = 33;
  /** RegularExpression Id. */
  int CADENA = 34;
  /** RegularExpression Id. */
  int LISTA = 35;
  /** RegularExpression Id. */
  int INCLUIR = 36;
  /** RegularExpression Id. */
  int DEFINIR = 37;
  /** RegularExpression Id. */
  int CONIF = 38;
  /** RegularExpression Id. */
  int CONELSE = 39;
  /** RegularExpression Id. */
  int CONSWITCH = 40;
  /** RegularExpression Id. */
  int OPCASE = 41;
  /** RegularExpression Id. */
  int FOR = 42;
  /** RegularExpression Id. */
  int WHILE = 43;
  /** RegularExpression Id. */
  int DOWHILE = 44;
  /** RegularExpression Id. */
  int TYPEINT = 45;
  /** RegularExpression Id. */
  int TYPELONG = 46;
  /** RegularExpression Id. */
  int TYPEBOOLEAN = 47;
  /** RegularExpression Id. */
  int TYPECHAR = 48;
  /** RegularExpression Id. */
  int TYPEFLOAT = 49;
  /** RegularExpression Id. */
  int TYPEDOUBLE = 50;
  /** RegularExpression Id. */
  int VALCHAR = 51;
  /** RegularExpression Id. */
  int VALFLOAT = 52;
  /** RegularExpression Id. */
  int VALINT = 53;
  /** RegularExpression Id. */
  int VALLONG = 54;
  /** RegularExpression Id. */
  int VALDOUBLE = 55;
  /** RegularExpression Id. */
  int VALBOOL = 56;
  /** RegularExpression Id. */
  int VALSHORT = 57;
  /** RegularExpression Id. */
  int VARIABLE = 58;
  /** RegularExpression Id. */
  int COMA = 59;
  /** RegularExpression Id. */
  int LIMITANTE = 60;
  /** RegularExpression Id. */
  int PUNTUAR = 61;
  /** RegularExpression Id. */
  int PARIZQ = 62;
  /** RegularExpression Id. */
  int PARDER = 63;
  /** RegularExpression Id. */
  int CORIZQ = 64;
  /** RegularExpression Id. */
  int CORDER = 65;
  /** RegularExpression Id. */
  int LLAIZQ = 66;
  /** RegularExpression Id. */
  int LLADER = 67;
  /** RegularExpression Id. */
  int COMENTA = 68;
  /** RegularExpression Id. */
  int ERROR = 69;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"int main()\"",
    "\"using namespace std\"",
    "\"return 0;\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"++\"",
    "\"--\"",
    "\"%\"",
    "\"=\"",
    "\"*=\"",
    "\"/=\"",
    "\"+=\"",
    "\"%=\"",
    "\"-=\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"cin\"",
    "\"cout\"",
    "\">>\"",
    "\"<<\"",
    "\"endl\"",
    "\"<iostream.h>\"",
    "\"<math.h>\"",
    "\"<vector.h>\"",
    "\"<string.h>\"",
    "\"<list.h>\"",
    "\"#include\"",
    "\"#define\"",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"case\"",
    "\"for\"",
    "\"while\"",
    "\"do\"",
    "\"int\"",
    "\"ling\"",
    "\"boolean\"",
    "\"char\"",
    "\"float\"",
    "\"double\"",
    "<VALCHAR>",
    "<VALFLOAT>",
    "<VALINT>",
    "<VALLONG>",
    "<VALDOUBLE>",
    "<VALBOOL>",
    "<VALSHORT>",
    "<VARIABLE>",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"//\"",
    "<ERROR>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\r\\n\"",
    "\"\\t\"",
  };

}
